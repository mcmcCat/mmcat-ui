/* Element Chalk Variables */
@use "sass:math";
@use "sass:map";
@use "../mixins/function.scss" as *;

// types
$types: primary, success, warning, danger, error, info;

// Color
$colors: () !default;
$colors: map.deep-merge(
  (
    "white": #ffffff,
    "black": #000000,
    "primary": (
      "base": #409eff,
    ),
    "success": (
      "base": #67c23a,
    ),
    "warning": (
      "base": #e6a23c,
    ),
    "danger": (
      "base": #f56c6c,
    ),
    "error": (
      "base": #f56c6c,
    ),
    "info": (
      "base": #909399,
    ),
  ),
  $colors
);

$color-white: map.get($colors, "white") !default;
$color-black: map.get($colors, "black") !default;
$color-primary: map.get($colors, "primary", "base") !default;
$color-success: map.get($colors, "success", "base") !default;
$color-warning: map.get($colors, "warning", "base") !default;
$color-danger: map.get($colors, "danger", "base") !default;
$color-error: map.get($colors, "error", "base") !default;
$color-info: map.get($colors, "info", "base") !default;

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level(
  $type,
  $number,
  $mode: "light",
  $mix-color: $color-white
) {
  $colors: map.deep-merge(
    (
      $type: (
        "#{$mode}-#{$number}":
          mix(
            $mix-color,
            map.get($colors, $type, "base"),
            math.percentage(math.div($number, 10))
          ),
      ),
    ),
    $colors
  ) !global; // 将局部变量转换为全局变量
}

// $colors.primary.light-i
// --el-color-primary-light-i
// 10% 53a8ff
// 20% 66b1ff
// 30% 79bbff
// 40% 8cc5ff
// 50% a0cfff
// 60% b3d8ff
// 70% c6e2ff
// 80% d9ecff
// 90% ecf5ff
@each $type in $types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, "light", $color-white);
  }
}
// --el-color-primary-dark-2
@each $type in $types {
  @include set-color-mix-level($type, 2, "dark", $color-black);
}

$text-color: () !default;
$text-color: map.merge(
  (
    "primary": #303133,
    "regular": #606266,
    "secondary": #909399,
    "placeholder": #a8abb2,
    "disabled": #c0c4cc,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    "": #dcdfe6,
    "light": #e4e7ed,
    "lighter": #ebeef5,
    "extra-light": #f2f6fc,
    "dark": #d4d7de,
    "darker": #cdd0d6,
  ),
  $border-color
);

$fill-color: () !default;
$fill-color: map.merge(
  (
    "": #f0f2f5,
    "light": #f5f7fa,
    "lighter": #fafafa,
    "extra-light": #fafcff,
    "dark": #ebedf0,
    "darker": #e6e8eb,
    "blank": #ffffff,
  ),
  $fill-color
);

// Background
$bg-color: () !default;
$bg-color: map.merge(
  (
    "": #ffffff,
    "page": #f2f3f5,
    "overlay": #ffffff,
  ),
  $bg-color
);

// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: getCssVar("text-color", "disabled") !default;

$border-radius: () !default;
$border-radius: map.merge(
  (
    "base": 4px,
    "small": 2px,
    "round": 20px,
    "circle": 100%,
  ),
  $border-radius
);

// Box-shadow
$box-shadow: () !default;
$box-shadow: map.merge(
  (
    "": (
      0px 12px 32px 4px rgba(0, 0, 0, 0.04),
      0px 8px 20px rgba(0, 0, 0, 0.08),
    ),
    "light": (
      0px 0px 12px rgba(0, 0, 0, 0.12),
    ),
    "lighter": (
      0px 0px 6px rgba(0, 0, 0, 0.12),
    ),
    "dark": (
      0px 16px 48px 16px rgba(0, 0, 0, 0.08),
      0px 12px 32px rgba(0, 0, 0, 0.12),
      0px 8px 16px -8px rgba(0, 0, 0, 0.16),
    ),
  ),
  $box-shadow
);

// Typography
$font-family: () !default;
$font-family: map.merge(
  (
    // default family
    "":
      "'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif"
  ),
  $font-family
);

$font-size: () !default;
$font-size: map.merge(
  (
    "extra-large": 20px,
    "large": 18px,
    "medium": 16px,
    "base": 14px,
    "small": 13px,
    "extra-small": 12px,
  ),
  $font-size
);

// zIndex
$z-index: () !default;
$z-index: map.merge(
  (
    "normal": 1,
    "top": 1000,
    "popper": 2000,
  ),
  $z-index
);

// Disable default
$disabled: () !default;
$disabled: map.merge(
  (
    "bg-color": getCssVar("fill-color", "light"),
    "text-color": getCssVar("text-color", "placeholder"),
    "border-color": getCssVar("border-color", "light"),
  ),
  $disabled
);

$common-component-size: () !default;
$common-component-size: map.merge(
  (
    "large": 40px,
    "default": 32px,
    "small": 24px,
  ),
  $common-component-size
);

// overlay
$overlay-color: () !default;
$overlay-color: map.merge(
  (
    "": rgba(0, 0, 0, 0.8),
    "light": rgba(0, 0, 0, 0.7),
    "lighter": rgba(0, 0, 0, 0.5),
  ),
  $overlay-color
);

// mask
$mask-color: () !default;
$mask-color: map.merge(
  (
    "": rgba(255, 255, 255, 0.9),
    "extra-light": rgba(255, 255, 255, 0.3),
  ),
  $mask-color
);

// Components
// ---

// Button
// css3 var in packages/theme-chalk/src/button.scss
$button: () !default;
$button: map.merge(
  (
    "font-weight": getCssVar("font-weight-primary"),
    "border-color": getCssVar("border-color"),
    "bg-color": getCssVar("fill-color", "blank"),
    "text-color": getCssVar("text-color", "regular"),
    "disabled-text-color": getCssVar("disabled-text-color"),
    "disabled-bg-color": getCssVar("fill-color", "blank"),
    "disabled-border-color": getCssVar("border-color-light"),
    "divide-border-color": rgba($color-white, 0.5),
    "hover-text-color": getCssVar("color-primary"),
    "hover-bg-color": getCssVar("color-primary", "light-9"),
    "hover-border-color": getCssVar("color-primary-light-7"),
    "active-text-color": getCssVar("button-hover-text-color"),
    "active-border-color": getCssVar("color-primary"),
    "active-bg-color": getCssVar("button", "hover-bg-color"),
    "outline-color": getCssVar("color-primary", "light-5"),
    "hover-link-text-color": getCssVar("color-info"),
    "active-color": getCssVar("text-color", "primary"),
  ),
  $button
);

$button-border-width: $border-width !default;

// need mix, so do not use css var
$button-hover-tint-percent: 20%;
$button-active-shade-percent: 10%;

$button-border-color: () !default;
$button-bg-color: () !default;
$button-text-color: () !default;

@each $type in $types {
  $button-border-color: map.merge(
    (
      $type: map.get($colors, $type, "base"),
    ),
    $button-border-color
  ) !global;

  $button-bg-color: map.merge(
    (
      $type: map.get($colors, $type, "base"),
    ),
    $button-bg-color
  ) !global;
}

$button-font-size: () !default;
$button-font-size: map.merge(
  (
    "large": getCssVar("font-size", "base"),
    "default": getCssVar("font-size", "base"),
    "small": 12px,
  ),
  $button-font-size
);

$button-border-radius: () !default;
$button-border-radius: map.merge(
  (
    "large": getCssVar("border-radius", "base"),
    "default": getCssVar("border-radius", "base"),
    "small": calc(#{getCssVar("border-radius", "base")} - 1px),
  ),
  $button-border-radius
);

$button-padding-vertical: () !default;
$button-padding-vertical: map.merge(
  (
    "large": 13px,
    "default": 9px,
    "small": 6px,
  ),
  $button-padding-vertical
);

$button-padding-horizontal: () !default;
$button-padding-horizontal: map.merge(
  (
    "large": 20px,
    "default": 16px,
    "small": 12px,
  ),
  $button-padding-horizontal
);

// Size
$common-component-size: () !default;
$common-component-size: map.merge(
  (
    "large": 40px,
    "default": 32px,
    "small": 24px,
  ),
  $common-component-size
);

// Input
// css3 var in packages/theme-chalk/src/input.scss
$input-height: () !default;
$input-height: map.merge($common-component-size, $input-height);
